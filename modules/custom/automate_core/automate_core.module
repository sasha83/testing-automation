<?php

/**
 * @file
 * Contains clearesult_register.module.
 */

// use Drupal\Component\Serialization\Json;
// use Drupal\Core\Routing\RouteMatchInterface;
// use Drupal\Core\Form\FormStateInterface;
// use Drupal\Core\Url;
// use Drupal\views\ViewExecutable;
// use Drupal\Core\Language\LanguageInterface;
// use Drupal\node\NodeInterface;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;


/**
 * Implements hook_help().
 */

function automate_core_node_presave($node) {
	$typeName = $node->bundle();
	if($typeName==="lighthouse_report") {
        $domain_id = $node->get('field_domain_id')->value;
        $test_suite_id = $node->get('field_test_suite_id')->value;
        
        // $fetch_time = $node->get('field_fetch_time')->value;
        $node->set('field_domain', $domain_id);
        $node->set('field_test_suite_reference', $test_suite_id);
        // $node->set('created', $fetch_time);

        // set created time/date to lighthouse report fetch time.
        // $date_formatter = \Drupal::service('date.formatter');
        $fetch_time = $node->get('field_fetch_time')->value;
        $node->created = strtotime($fetch_time);


    
        // reference URL node, and create the URL node if doesn't exist.
        $url = $node->get('field_requested_url')->value;
        $ids = \Drupal::entityQuery('node')
          ->accessCheck(FALSE)
          ->condition('title', $url)
          ->condition('type', 'url')
          ->execute();

        // $urls = $nodeStorage->loadMultiple($ids);
        // print_r($ids);
        if(sizeof($ids)<1) {
            $url_node = Node::create(['type' => 'url']);
            $url_node->set('title', $url);
            $url_node->set('field_domain', $domain_id);
            $url_node->enforceIsNew(FALSE);
            $node->set('field_url_reference', $url_node->id());
            $url_node->save();
        } else {
          $urlNode = Node::load(array_pop($ids));
          $most_recent = $urlNode->get('field_most_recent_lighthouse_rep');
          $urlNode->set('field_notes', $most_recent->target_id);
          $urlNode->save();

          }
    
        // $values = \Drupal::entityQuery('node')->condition('field_title', $url)->execute();
        // $node_exists = !empty($values);

        // if(!$node_exists) {
        //     $url_node = Node::create(['type' => 'url']);
        //     $url_node->set('title', $url);
        //     $url_node->enforceIsNew();
        //     $url_node->save();
        // }


	}
//   elseif ($typeName==="program") {
//     // Set rabbit hole settings to display page if the program has a degree type of "earn/learn"
//     /** @var \Drupal\taxonomy\TermInterface $degree_type_term  */
//     $degree_type_term = $node->field_program_degree_type->entity;
//     if (!empty($degree_type_term) && $degree_type_term->id() == 286) {
//       // Earn + Learn degree type: display page.
//       $node->set('rh_action', 'display_page');
//     }
//     else {
//       // Other degree types: use the default set in the content type.
//       $node->set('rh_action', 'bundle_default');
//     }

//     // Job type placeholder field is a workaround for using feeds to update a multi-value reference field.
// 		$job_type_string = trim($node->get('field_job_type_placeholder')->value);
// 		if($job_type_string!='') {
// 			$job_type_array = explode('+', $job_type_string);
// 		    $node->set('field_program_job_type', []);
// 			foreach($job_type_array as $job_type_ID) {
// /*
// 				$query = \Drupal::entityQuery('node')
// 				  ->condition('type', 'job_type')
// 				  ->condition('field_title', $title);
// 				$result = $query.execute();
// */
// 			    $node->get('field_program_job_type')->appendItem([
// 			      'target_id' => $job_type_ID,
// 			    ]);
// 			}
// 		    // $node->set('field_job_type_placeholder', '');
// 		}
// 	}
}
